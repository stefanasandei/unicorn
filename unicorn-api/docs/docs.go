// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Unicorn API Support",
            "url": "https://github.com/your-org/unicorn-api",
            "email": "support@unicorn-api.com"
        },
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/buckets": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all storage buckets owned by the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "List buckets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.StorageBucket"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new storage bucket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create bucket",
                "parameters": [
                    {
                        "description": "Bucket name",
                        "name": "bucket",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateBucketRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.StorageBucket"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/buckets/{bucket_id}/files": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all files in a storage bucket",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "List files",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "bucket_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.File"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload a file to a storage bucket",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Upload file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "bucket_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.File"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/buckets/{bucket_id}/files/{file_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Download a file from a storage bucket",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Download file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "bucket_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "file_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a file from a storage bucket",
                "tags": [
                    "Storage"
                ],
                "summary": "Delete file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "bucket_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "file_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/compute/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new compute container with the specified image and configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compute"
                ],
                "summary": "Create a compute container",
                "parameters": [
                    {
                        "description": "Compute container creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ComputeCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ComputeContainerInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    }
                }
            }
        },
        "/api/v1/compute/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all compute containers owned by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compute"
                ],
                "summary": "List compute containers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ComputeContainerInfo"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    }
                }
            }
        },
        "/api/v1/debug/token": {
            "get": {
                "description": "Returns a static API token with admin permissions for testing purposes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IAM"
                ],
                "summary": "Get a debug API token for testing",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/lambda/execute": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Execute code in a Lambda function with specified runtime and files",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lambda"
                ],
                "summary": "Execute a Lambda function",
                "parameters": [
                    {
                        "description": "Lambda execution request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LambdaExecuteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LambdaExecuteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/lambda/test": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Test a Lambda function with specified runtime and files",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lambda"
                ],
                "summary": "Test a Lambda function",
                "parameters": [
                    {
                        "description": "Lambda test request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LambdaExecuteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LambdaExecuteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/login": {
            "post": {
                "description": "Authenticate a user and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IAM"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the organization name and all users (name, role ID) in it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IAM"
                ],
                "summary": "Get the user's organization and its users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetOrganizationsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new organization that can contain multiple accounts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IAM"
                ],
                "summary": "Create a new organization",
                "parameters": [
                    {
                        "description": "Organization information",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateOrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{org_id}/users": {
            "post": {
                "description": "Create a user account in a specific organization with the specified role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IAM"
                ],
                "summary": "Create a user in an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/roles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all roles (name, permissions) for the authenticated user's organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IAM"
                ],
                "summary": "Get all roles in the user's organization",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetRolesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new role with specified permissions. Permissions are: 0=Read, 1=Write, 2=Delete",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IAM"
                ],
                "summary": "Create a new role",
                "parameters": [
                    {
                        "description": "Role information",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateRoleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/roles/assign": {
            "post": {
                "description": "Assign a role to a user or bot account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IAM"
                ],
                "summary": "Assign a role to an account",
                "parameters": [
                    {
                        "description": "Role assignment information",
                        "name": "assignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AssignRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.AssignRoleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/secrets": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all secrets for the authenticated user (does not return secret values)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets Manager"
                ],
                "summary": "List secrets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SecretResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new secret for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets Manager"
                ],
                "summary": "Create secret",
                "parameters": [
                    {
                        "description": "Secret details to create",
                        "name": "secret",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SecretBodyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.SecretResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    }
                }
            }
        },
        "/api/v1/secrets/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a secret and its decrypted value for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secrets Manager"
                ],
                "summary": "Get secret",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Secret ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the value and/or metadata for a secret",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Secrets Manager"
                ],
                "summary": "Update secret",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Secret ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Secret update",
                        "name": "secret",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateSecretBody"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a secret for the authenticated user",
                "tags": [
                    "Secrets Manager"
                ],
                "summary": "Delete secret",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Secret ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.AppError"
                        }
                    }
                }
            }
        },
        "/api/v1/token/refresh": {
            "post": {
                "description": "Refresh an expired JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IAM"
                ],
                "summary": "Refresh JWT token",
                "parameters": [
                    {
                        "description": "Refresh token request",
                        "name": "token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/token/validate": {
            "get": {
                "description": "Validate a JWT token and return its claims",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IAM"
                ],
                "summary": "Validate JWT token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ValidateTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Get the health status of the API. This endpoint can be used by load balancers and monitoring systems to verify the API is running properly.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthCheckResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errors.AppError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "handlers.AssignRoleRequest": {
            "type": "object",
            "required": [
                "account_id",
                "role_id"
            ],
            "properties": {
                "account_id": {
                    "description": "The ID of the account to assign the role to\nexample: 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string"
                },
                "role_id": {
                    "description": "The ID of the role to assign\nexample: 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string"
                }
            }
        },
        "handlers.AssignRoleResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "The ID of the account\nexample: 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string"
                },
                "message": {
                    "description": "Success message\nexample: Role assigned successfully",
                    "type": "string"
                },
                "role_id": {
                    "description": "The ID of the role\nexample: 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string"
                }
            }
        },
        "handlers.CreateBucketRequest": {
            "description": "Request to create a new storage bucket",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "The name of the bucket\nexample: my-bucket",
                    "type": "string"
                }
            }
        },
        "handlers.CreateOrganizationRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "The name of the organization\nexample: Acme Corporation",
                    "type": "string"
                }
            }
        },
        "handlers.CreateOrganizationResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Success message\nexample: Organization created successfully",
                    "type": "string"
                },
                "organization": {
                    "description": "The created organization",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Organization"
                        }
                    ]
                }
            }
        },
        "handlers.CreateRoleRequest": {
            "type": "object",
            "required": [
                "name",
                "permissions"
            ],
            "properties": {
                "name": {
                    "description": "The name of the role (e.g., admin, user, moderator)\nexample: admin",
                    "type": "string"
                },
                "permissions": {
                    "description": "The permissions assigned to the role (0=Read, 1=Write, 2=Delete)\nexample: [0,1,2]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Permission"
                    }
                }
            }
        },
        "handlers.CreateRoleResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Success message\nexample: Role created successfully",
                    "type": "string"
                },
                "role": {
                    "description": "The created role",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Role"
                        }
                    ]
                }
            }
        },
        "handlers.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "role_id"
            ],
            "properties": {
                "email": {
                    "description": "The email address of the user (must be unique)\nexample: john.doe@example.com",
                    "type": "string"
                },
                "name": {
                    "description": "The display name of the user\nexample: John Doe",
                    "type": "string"
                },
                "password": {
                    "description": "The password for the user account (will be hashed)\nexample: securePassword123",
                    "type": "string",
                    "minLength": 8
                },
                "role_id": {
                    "description": "The ID of the role to assign to the user\nexample: 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string"
                }
            }
        },
        "handlers.CreateUserResponse": {
            "type": "object",
            "properties": {
                "account": {
                    "description": "The created user account",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Account"
                        }
                    ]
                },
                "message": {
                    "description": "Success message\nexample: User created successfully",
                    "type": "string"
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Additional error details\nexample: Field 'email' is required",
                    "type": "string"
                },
                "error": {
                    "description": "The error message\nexample: Invalid request",
                    "type": "string"
                },
                "status_code": {
                    "description": "The HTTP status code\nexample: 400",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "The timestamp when the error occurred\nexample: 2024-01-01T12:00:00Z",
                    "type": "string"
                }
            }
        },
        "handlers.GetOrganizationsResponse": {
            "type": "object",
            "properties": {
                "organization_name": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.OrganizationUser"
                    }
                }
            }
        },
        "handlers.GetRolesResponse": {
            "type": "object",
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Role"
                    }
                }
            }
        },
        "handlers.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Additional health information\nexample: {\"database\":\"connected\",\"redis\":\"connected\"}",
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "description": "The health status of the API\nexample: healthy",
                    "type": "string"
                },
                "timestamp": {
                    "description": "The timestamp when the health check was performed\nexample: 2024-01-01T12:00:00Z",
                    "type": "string"
                },
                "version": {
                    "description": "The version of the API\nexample: 1.0.0",
                    "type": "string"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "The email address of the user\nexample: john.doe@example.com",
                    "type": "string"
                },
                "password": {
                    "description": "The password for the user account\nexample: securePassword123",
                    "type": "string"
                }
            }
        },
        "handlers.LoginResponse": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "description": "The expiration time of the token\nexample: 2024-01-01T12:00:00Z",
                    "type": "string"
                },
                "message": {
                    "description": "Success message\nexample: Login successful",
                    "type": "string"
                },
                "token": {
                    "description": "The JWT token for authentication\nexample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAwIiwicm9sZV9pZCI6IjEyM2U0NTY3LWU4OWItMTJkMy1hNDU2LTQyNjYxNDE3NDAwMCIsImV4cCI6MTcwNDE2ODAwMH0.example_signature",
                    "type": "string"
                },
                "token_type": {
                    "description": "The type of token\nexample: Bearer",
                    "type": "string"
                }
            }
        },
        "handlers.OrganizationUser": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "role_id": {
                    "type": "string"
                }
            }
        },
        "handlers.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "description": "The JWT token to refresh\nexample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAwIiwicm9zZV9pZCI6IjEyM2U0NTY3LWU4OWItMTJkMy1hNDU2LTQyNjYxNDE3NDAwMCIsImV4cCI6MTcwNDE2ODAwMH0.example_signature",
                    "type": "string"
                }
            }
        },
        "handlers.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "description": "The expiration time of the token\nexample: 2024-01-01T12:00:00Z",
                    "type": "string"
                },
                "message": {
                    "description": "Success message\nexample: Token refreshed successfully",
                    "type": "string"
                },
                "token": {
                    "description": "The new JWT token\nexample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAwIiwicm9zZV9pZCI6IjEyM2U0NTY3LWU4OWItMTJkMy1hNDU2LTQyNjYxNDE3NDAwMCIsImV4cCI6MTcwNDE2ODAwMH0.new_signature",
                    "type": "string"
                },
                "token_type": {
                    "description": "The type of token\nexample: Bearer",
                    "type": "string"
                }
            }
        },
        "handlers.TokenClaimsResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "The account ID\nexample: 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string"
                },
                "expires_at": {
                    "description": "The token expiration time\nexample: 2024-01-01T12:00:00Z",
                    "type": "string"
                },
                "role_id": {
                    "description": "The role ID\nexample: 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string"
                }
            }
        },
        "handlers.ValidateTokenResponse": {
            "type": "object",
            "properties": {
                "claims": {
                    "description": "The token claims",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handlers.TokenClaimsResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Success message\nexample: Token is valid",
                    "type": "string"
                },
                "valid": {
                    "description": "Whether the token is valid\nexample: true",
                    "type": "boolean"
                }
            }
        },
        "models.Account": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "The creation timestamp\nexample: 2024-01-01T12:00:00Z",
                    "type": "string"
                },
                "email": {
                    "description": "The email address (required for user accounts, unique)\nexample: john.doe@example.com",
                    "type": "string"
                },
                "id": {
                    "description": "The unique ID of the account\nexample: 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string"
                },
                "last_login_at": {
                    "description": "Token related (JWT) - last successful login timestamp\nexample: 2024-01-01T12:00:00Z",
                    "type": "string"
                },
                "name": {
                    "description": "The display name of the account\nexample: John Doe",
                    "type": "string"
                },
                "organization": {
                    "description": "GORM Associations\nThe organization this account belongs to",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Organization"
                        }
                    ]
                },
                "organization_id": {
                    "description": "Foreign Keys\nThe ID of the organization this account belongs to\nexample: 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string"
                },
                "role": {
                    "description": "The role assigned to this account",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Role"
                        }
                    ]
                },
                "role_id": {
                    "description": "The ID of the role assigned to this account\nexample: 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string"
                },
                "type": {
                    "description": "The type of account (user or bot)\nexample: user",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.AccountType"
                        }
                    ]
                },
                "updated_at": {
                    "description": "The last update timestamp\nexample: 2024-01-01T12:00:00Z",
                    "type": "string"
                }
            }
        },
        "models.AccountType": {
            "type": "string",
            "enum": [
                "user",
                "bot"
            ],
            "x-enum-comments": {
                "AccountTypeBot": "Automated service account",
                "AccountTypeUser": "Human user account"
            },
            "x-enum-descriptions": [
                "Human user account",
                "Automated service account"
            ],
            "x-enum-varnames": [
                "AccountTypeUser",
                "AccountTypeBot"
            ]
        },
        "models.ComputeContainerInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "ports": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.ComputeCreateRequest": {
            "type": "object",
            "required": [
                "expose_port",
                "image",
                "ports",
                "preset"
            ],
            "properties": {
                "expose_port": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "ports": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "preset": {
                    "enum": [
                        "micro",
                        "small"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ComputePreset"
                        }
                    ]
                }
            }
        },
        "models.ComputePreset": {
            "type": "string",
            "enum": [
                "micro",
                "small"
            ],
            "x-enum-varnames": [
                "PresetMicro",
                "PresetSmall"
            ]
        },
        "models.File": {
            "description": "A file stored in a storage bucket.",
            "type": "object",
            "properties": {
                "content_type": {
                    "description": "The MIME type of the file",
                    "type": "string"
                },
                "contents": {
                    "description": "The file contents (base64 or text)",
                    "type": "string"
                },
                "created_at": {
                    "description": "The creation timestamp",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier of the file",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the file",
                    "type": "string"
                },
                "size": {
                    "description": "The size of the file in bytes",
                    "type": "integer"
                },
                "storage_bucket_id": {
                    "description": "The ID of the bucket this file belongs to",
                    "type": "string"
                },
                "updated_at": {
                    "description": "The last update timestamp",
                    "type": "string"
                }
            }
        },
        "models.LambdaExecuteRequest": {
            "type": "object",
            "properties": {
                "process": {
                    "$ref": "#/definitions/models.LambdaProcessInfo"
                },
                "project": {
                    "type": "object",
                    "required": [
                        "files"
                    ],
                    "properties": {
                        "entry": {
                            "type": "string",
                            "example": "import utils\nprint(utils.add(1,2))"
                        },
                        "files": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LambdaFile"
                            }
                        }
                    }
                },
                "runtime": {
                    "type": "object",
                    "required": [
                        "name"
                    ],
                    "properties": {
                        "name": {
                            "type": "string",
                            "example": "python3"
                        },
                        "version": {
                            "type": "string",
                            "example": "3.12"
                        }
                    }
                }
            }
        },
        "models.LambdaExecuteResponse": {
            "type": "object",
            "properties": {
                "output": {
                    "type": "string",
                    "example": "3\n"
                },
                "runtime": {
                    "type": "string",
                    "example": "python3"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "time": {
                    "type": "string",
                    "example": "0.023s"
                }
            }
        },
        "models.LambdaFile": {
            "type": "object",
            "required": [
                "contents",
                "name"
            ],
            "properties": {
                "contents": {
                    "type": "string",
                    "example": "def add(a, b):\n\treturn a + b"
                },
                "name": {
                    "type": "string",
                    "example": "utils.py"
                }
            }
        },
        "models.LambdaPermissions": {
            "type": "object",
            "properties": {
                "network": {
                    "type": "boolean",
                    "example": false
                },
                "read": {
                    "type": "boolean",
                    "example": true
                },
                "write": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "models.LambdaProcessInfo": {
            "type": "object",
            "properties": {
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "{\"DEBUG\"": "\"true\"}"
                    }
                },
                "max_opened_files": {
                    "type": "integer",
                    "example": 10
                },
                "max_processes": {
                    "type": "integer",
                    "example": 5
                },
                "permissions": {
                    "$ref": "#/definitions/models.LambdaPermissions"
                },
                "stdin": {
                    "type": "string",
                    "example": "test input"
                },
                "time": {
                    "type": "string",
                    "example": "2s"
                }
            }
        },
        "models.Organization": {
            "type": "object",
            "properties": {
                "accounts": {
                    "description": "An organization can have many accounts\nexample: [{\"id\":\"123e4567-e89b-12d3-a456-426614174000\",\"name\":\"John Doe\",\"email\":\"john@acme.com\",\"type\":\"user\"}]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Account"
                    }
                },
                "created_at": {
                    "description": "The creation timestamp\nexample: 2024-01-01T12:00:00Z",
                    "type": "string"
                },
                "id": {
                    "description": "The unique ID of the organization\nexample: 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the organization (unique)\nexample: Acme Corporation",
                    "type": "string"
                },
                "updated_at": {
                    "description": "The last update timestamp\nexample: 2024-01-01T12:00:00Z",
                    "type": "string"
                }
            }
        },
        "models.Permission": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-comments": {
                "Delete": "Delete permission (2)",
                "Read": "Read permission (0)",
                "Write": "Write permission (1)"
            },
            "x-enum-descriptions": [
                "Read permission (0)",
                "Write permission (1)",
                "Delete permission (2)"
            ],
            "x-enum-varnames": [
                "Read",
                "Write",
                "Delete"
            ]
        },
        "models.Role": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "The creation timestamp\nexample: 2024-01-01T12:00:00Z",
                    "type": "string"
                },
                "id": {
                    "description": "The unique ID of the role\nexample: 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the role (e.g., admin, user, moderator)\nexample: admin",
                    "type": "string"
                },
                "permissions": {
                    "description": "The permissions assigned to the role (0=Read, 1=Write, 2=Delete)\nexample: [0,1,2]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Permission"
                    }
                },
                "updated_at": {
                    "description": "The last update timestamp\nexample: 2024-01-01T12:00:00Z",
                    "type": "string"
                }
            }
        },
        "models.SecretBodyRequest": {
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "metadata": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.SecretResponse": {
            "description": "A secret response without sensitive data.",
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.StorageBucket": {
            "description": "A storage bucket owned by a user, containing files.",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "The creation timestamp",
                    "type": "string"
                },
                "files": {
                    "description": "The files in the bucket",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.File"
                    }
                },
                "id": {
                    "description": "The unique identifier of the bucket",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the bucket",
                    "type": "string"
                },
                "updated_at": {
                    "description": "The last update timestamp",
                    "type": "string"
                },
                "user_id": {
                    "description": "The ID of the user who owns the bucket",
                    "type": "string"
                }
            }
        },
        "models.UpdateSecretBody": {
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "\"Type 'Bearer ' + your JWT token to authorize\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Unicorn API",
	Description:      "A comprehensive RESTful API for Unicorn services providing Identity and Access Management (IAM) functionality. This API supports user authentication, role-based access control, organization management, and JWT token handling.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

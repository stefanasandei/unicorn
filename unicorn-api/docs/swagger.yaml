basePath: /
definitions:
  errors.AppError:
    properties:
      code:
        type: string
      details:
        type: string
      message:
        type: string
      status_code:
        type: integer
      timestamp:
        type: string
    type: object
  handlers.AssignRoleRequest:
    properties:
      account_id:
        description: |-
          The ID of the account to assign the role to
          example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      role_id:
        description: |-
          The ID of the role to assign
          example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - account_id
    - role_id
    type: object
  handlers.AssignRoleResponse:
    properties:
      account_id:
        description: |-
          The ID of the account
          example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      message:
        description: |-
          Success message
          example: Role assigned successfully
        type: string
      role_id:
        description: |-
          The ID of the role
          example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  handlers.CreateBucketRequest:
    description: Request to create a new storage bucket
    properties:
      name:
        description: |-
          The name of the bucket
          example: my-bucket
        type: string
    required:
    - name
    type: object
  handlers.CreateOrganizationRequest:
    properties:
      name:
        description: |-
          The name of the organization
          example: Acme Corporation
        type: string
    required:
    - name
    type: object
  handlers.CreateOrganizationResponse:
    properties:
      message:
        description: |-
          Success message
          example: Organization created successfully
        type: string
      organization:
        allOf:
        - $ref: '#/definitions/models.Organization'
        description: The created organization
    type: object
  handlers.CreateRoleRequest:
    properties:
      name:
        description: |-
          The name of the role (e.g., admin, user, moderator)
          example: admin
        type: string
      permissions:
        description: |-
          The permissions assigned to the role (0=Read, 1=Write, 2=Delete)
          example: [0,1,2]
        items:
          $ref: '#/definitions/models.Permission'
        type: array
    required:
    - name
    - permissions
    type: object
  handlers.CreateRoleResponse:
    properties:
      message:
        description: |-
          Success message
          example: Role created successfully
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.Role'
        description: The created role
    type: object
  handlers.CreateUserRequest:
    properties:
      email:
        description: |-
          The email address of the user (must be unique)
          example: john.doe@example.com
        type: string
      name:
        description: |-
          The display name of the user
          example: John Doe
        type: string
      password:
        description: |-
          The password for the user account (will be hashed)
          example: securePassword123
        minLength: 8
        type: string
      role_id:
        description: |-
          The ID of the role to assign to the user
          example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - email
    - name
    - password
    - role_id
    type: object
  handlers.CreateUserResponse:
    properties:
      account:
        allOf:
        - $ref: '#/definitions/models.Account'
        description: The created user account
      message:
        description: |-
          Success message
          example: User created successfully
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      details:
        description: |-
          Additional error details
          example: Field 'email' is required
        type: string
      error:
        description: |-
          The error message
          example: Invalid request
        type: string
      status_code:
        description: |-
          The HTTP status code
          example: 400
        type: integer
      timestamp:
        description: |-
          The timestamp when the error occurred
          example: 2024-01-01T12:00:00Z
        type: string
    type: object
  handlers.GetOrganizationsResponse:
    properties:
      organization_name:
        type: string
      users:
        items:
          $ref: '#/definitions/handlers.OrganizationUser'
        type: array
    type: object
  handlers.GetRolesResponse:
    properties:
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
    type: object
  handlers.HealthCheckResponse:
    properties:
      details:
        additionalProperties: true
        description: |-
          Additional health information
          example: {"database":"connected","redis":"connected"}
        type: object
      status:
        description: |-
          The health status of the API
          example: healthy
        type: string
      timestamp:
        description: |-
          The timestamp when the health check was performed
          example: 2024-01-01T12:00:00Z
        type: string
      version:
        description: |-
          The version of the API
          example: 1.0.0
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      email:
        description: |-
          The email address of the user
          example: john.doe@example.com
        type: string
      password:
        description: |-
          The password for the user account
          example: securePassword123
        type: string
    required:
    - email
    - password
    type: object
  handlers.LoginResponse:
    properties:
      expires_at:
        description: |-
          The expiration time of the token
          example: 2024-01-01T12:00:00Z
        type: string
      message:
        description: |-
          Success message
          example: Login successful
        type: string
      token:
        description: |-
          The JWT token for authentication
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAwIiwicm9sZV9pZCI6IjEyM2U0NTY3LWU4OWItMTJkMy1hNDU2LTQyNjYxNDE3NDAwMCIsImV4cCI6MTcwNDE2ODAwMH0.example_signature
        type: string
      token_type:
        description: |-
          The type of token
          example: Bearer
        type: string
    type: object
  handlers.OrganizationUser:
    properties:
      id:
        type: string
      name:
        type: string
      role_id:
        type: string
    type: object
  handlers.RefreshTokenRequest:
    properties:
      token:
        description: |-
          The JWT token to refresh
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAwIiwicm9zZV9pZCI6IjEyM2U0NTY3LWU4OWItMTJkMy1hNDU2LTQyNjYxNDE3NDAwMCIsImV4cCI6MTcwNDE2ODAwMH0.example_signature
        type: string
    required:
    - token
    type: object
  handlers.RefreshTokenResponse:
    properties:
      expires_at:
        description: |-
          The expiration time of the token
          example: 2024-01-01T12:00:00Z
        type: string
      message:
        description: |-
          Success message
          example: Token refreshed successfully
        type: string
      token:
        description: |-
          The new JWT token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAwIiwicm9zZV9pZCI6IjEyM2U0NTY3LWU4OWItMTJkMy1hNDU2LTQyNjYxNDE3NDAwMCIsImV4cCI6MTcwNDE2ODAwMH0.new_signature
        type: string
      token_type:
        description: |-
          The type of token
          example: Bearer
        type: string
    type: object
  handlers.TokenClaimsResponse:
    properties:
      account_id:
        description: |-
          The account ID
          example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      expires_at:
        description: |-
          The token expiration time
          example: 2024-01-01T12:00:00Z
        type: string
      role_id:
        description: |-
          The role ID
          example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  handlers.ValidateTokenResponse:
    properties:
      claims:
        allOf:
        - $ref: '#/definitions/handlers.TokenClaimsResponse'
        description: The token claims
      message:
        description: |-
          Success message
          example: Token is valid
        type: string
      valid:
        description: |-
          Whether the token is valid
          example: true
        type: boolean
    type: object
  models.Account:
    properties:
      created_at:
        description: |-
          The creation timestamp
          example: 2024-01-01T12:00:00Z
        type: string
      email:
        description: |-
          The email address (required for user accounts, unique)
          example: john.doe@example.com
        type: string
      id:
        description: |-
          The unique ID of the account
          example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      last_login_at:
        description: |-
          Token related (JWT) - last successful login timestamp
          example: 2024-01-01T12:00:00Z
        type: string
      name:
        description: |-
          The display name of the account
          example: John Doe
        type: string
      organization:
        allOf:
        - $ref: '#/definitions/models.Organization'
        description: |-
          GORM Associations
          The organization this account belongs to
      organization_id:
        description: |-
          Foreign Keys
          The ID of the organization this account belongs to
          example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.Role'
        description: The role assigned to this account
      role_id:
        description: |-
          The ID of the role assigned to this account
          example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      type:
        allOf:
        - $ref: '#/definitions/models.AccountType'
        description: |-
          The type of account (user or bot)
          example: user
      updated_at:
        description: |-
          The last update timestamp
          example: 2024-01-01T12:00:00Z
        type: string
    type: object
  models.AccountType:
    enum:
    - user
    - bot
    type: string
    x-enum-comments:
      AccountTypeBot: Automated service account
      AccountTypeUser: Human user account
    x-enum-descriptions:
    - Human user account
    - Automated service account
    x-enum-varnames:
    - AccountTypeUser
    - AccountTypeBot
  models.ComputeContainerInfo:
    properties:
      id:
        type: string
      image:
        type: string
      ports:
        additionalProperties:
          type: string
        type: object
      status:
        type: string
    type: object
  models.ComputeCreateRequest:
    properties:
      expose_port:
        type: string
      image:
        type: string
      ports:
        additionalProperties:
          type: string
        type: object
      preset:
        allOf:
        - $ref: '#/definitions/models.ComputePreset'
        enum:
        - micro
        - small
    required:
    - expose_port
    - image
    - ports
    - preset
    type: object
  models.ComputePreset:
    enum:
    - micro
    - small
    type: string
    x-enum-varnames:
    - PresetMicro
    - PresetSmall
  models.File:
    description: A file stored in a storage bucket.
    properties:
      content_type:
        description: The MIME type of the file
        type: string
      contents:
        description: The file contents (base64 or text)
        type: string
      created_at:
        description: The creation timestamp
        type: string
      id:
        description: The unique identifier of the file
        type: string
      name:
        description: The name of the file
        type: string
      size:
        description: The size of the file in bytes
        type: integer
      storage_bucket_id:
        description: The ID of the bucket this file belongs to
        type: string
      updated_at:
        description: The last update timestamp
        type: string
    type: object
  models.LambdaExecuteRequest:
    properties:
      process:
        $ref: '#/definitions/models.LambdaProcessInfo'
      project:
        properties:
          entry:
            example: |-
              import utils
              print(utils.add(1,2))
            type: string
          files:
            items:
              $ref: '#/definitions/models.LambdaFile'
            type: array
        required:
        - files
        type: object
      runtime:
        properties:
          name:
            example: python3
            type: string
          version:
            example: "3.12"
            type: string
        required:
        - name
        type: object
    type: object
  models.LambdaExecuteResponse:
    properties:
      output:
        example: |
          3
        type: string
      runtime:
        example: python3
        type: string
      status:
        example: success
        type: string
      time:
        example: 0.023s
        type: string
    type: object
  models.LambdaFile:
    properties:
      contents:
        example: "def add(a, b):\n\treturn a + b"
        type: string
      name:
        example: utils.py
        type: string
    required:
    - contents
    - name
    type: object
  models.LambdaPermissions:
    properties:
      network:
        example: false
        type: boolean
      read:
        example: true
        type: boolean
      write:
        example: false
        type: boolean
    type: object
  models.LambdaProcessInfo:
    properties:
      env:
        additionalProperties:
          type: string
        example:
          '{"DEBUG"': '"true"}'
        type: object
      max_opened_files:
        example: 10
        type: integer
      max_processes:
        example: 5
        type: integer
      permissions:
        $ref: '#/definitions/models.LambdaPermissions'
      stdin:
        example: test input
        type: string
      time:
        example: 2s
        type: string
    type: object
  models.Organization:
    properties:
      accounts:
        description: |-
          An organization can have many accounts
          example: [{"id":"123e4567-e89b-12d3-a456-426614174000","name":"John Doe","email":"john@acme.com","type":"user"}]
        items:
          $ref: '#/definitions/models.Account'
        type: array
      created_at:
        description: |-
          The creation timestamp
          example: 2024-01-01T12:00:00Z
        type: string
      id:
        description: |-
          The unique ID of the organization
          example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      name:
        description: |-
          The name of the organization (unique)
          example: Acme Corporation
        type: string
      updated_at:
        description: |-
          The last update timestamp
          example: 2024-01-01T12:00:00Z
        type: string
    type: object
  models.Permission:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-comments:
      Delete: Delete permission (2)
      Read: Read permission (0)
      Write: Write permission (1)
    x-enum-descriptions:
    - Read permission (0)
    - Write permission (1)
    - Delete permission (2)
    x-enum-varnames:
    - Read
    - Write
    - Delete
  models.Role:
    properties:
      created_at:
        description: |-
          The creation timestamp
          example: 2024-01-01T12:00:00Z
        type: string
      id:
        description: |-
          The unique ID of the role
          example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      name:
        description: |-
          The name of the role (e.g., admin, user, moderator)
          example: admin
        type: string
      permissions:
        description: |-
          The permissions assigned to the role (0=Read, 1=Write, 2=Delete)
          example: [0,1,2]
        items:
          $ref: '#/definitions/models.Permission'
        type: array
      updated_at:
        description: |-
          The last update timestamp
          example: 2024-01-01T12:00:00Z
        type: string
    type: object
  models.SecretBodyRequest:
    properties:
      metadata:
        type: string
      name:
        type: string
      value:
        type: string
    required:
    - name
    - value
    type: object
  models.SecretResponse:
    description: A secret response without sensitive data.
    properties:
      created_at:
        type: string
      id:
        type: string
      metadata:
        type: string
      name:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.StorageBucket:
    description: A storage bucket owned by a user, containing files.
    properties:
      created_at:
        description: The creation timestamp
        type: string
      files:
        description: The files in the bucket
        items:
          $ref: '#/definitions/models.File'
        type: array
      id:
        description: The unique identifier of the bucket
        type: string
      name:
        description: The name of the bucket
        type: string
      updated_at:
        description: The last update timestamp
        type: string
      user_id:
        description: The ID of the user who owns the bucket
        type: string
    type: object
  models.UpdateSecretBody:
    properties:
      metadata:
        type: string
      value:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@unicorn-api.com
    name: Unicorn API Support
    url: https://github.com/your-org/unicorn-api
  description: A comprehensive RESTful API for Unicorn services providing Identity
    and Access Management (IAM) functionality. This API supports user authentication,
    role-based access control, organization management, and JWT token handling.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Unicorn API
  version: "1.0"
paths:
  /api/v1/buckets:
    get:
      description: List all storage buckets owned by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.StorageBucket'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List buckets
      tags:
      - Storage
    post:
      consumes:
      - application/json
      description: Create a new storage bucket
      parameters:
      - description: Bucket name
        in: body
        name: bucket
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateBucketRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.StorageBucket'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create bucket
      tags:
      - Storage
  /api/v1/buckets/{bucket_id}/files:
    get:
      description: List all files in a storage bucket
      parameters:
      - description: Bucket ID
        in: path
        name: bucket_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.File'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List files
      tags:
      - Storage
    post:
      consumes:
      - multipart/form-data
      description: Upload a file to a storage bucket
      parameters:
      - description: Bucket ID
        in: path
        name: bucket_id
        required: true
        type: string
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.File'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload file
      tags:
      - Storage
  /api/v1/buckets/{bucket_id}/files/{file_id}:
    delete:
      description: Delete a file from a storage bucket
      parameters:
      - description: Bucket ID
        in: path
        name: bucket_id
        required: true
        type: string
      - description: File ID
        in: path
        name: file_id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete file
      tags:
      - Storage
    get:
      description: Download a file from a storage bucket
      parameters:
      - description: Bucket ID
        in: path
        name: bucket_id
        required: true
        type: string
      - description: File ID
        in: path
        name: file_id
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Download file
      tags:
      - Storage
  /api/v1/compute/create:
    post:
      consumes:
      - application/json
      description: Create a new compute container with the specified image and configuration
      parameters:
      - description: Compute container creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ComputeCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ComputeContainerInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.AppError'
      security:
      - BearerAuth: []
      summary: Create a compute container
      tags:
      - Compute
  /api/v1/compute/list:
    get:
      consumes:
      - application/json
      description: List all compute containers owned by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ComputeContainerInfo'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.AppError'
      security:
      - BearerAuth: []
      summary: List compute containers
      tags:
      - Compute
  /api/v1/debug/token:
    get:
      consumes:
      - application/json
      description: Returns a static API token with admin permissions for testing purposes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get a debug API token for testing
      tags:
      - IAM
  /api/v1/lambda/execute:
    post:
      consumes:
      - application/json
      description: Execute code in a Lambda function with specified runtime and files
      parameters:
      - description: Lambda execution request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LambdaExecuteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LambdaExecuteResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - insufficient permissions
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Execute a Lambda function
      tags:
      - Lambda
  /api/v1/lambda/test:
    post:
      consumes:
      - application/json
      description: Test a Lambda function with specified runtime and files
      parameters:
      - description: Lambda test request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LambdaExecuteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LambdaExecuteResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - insufficient permissions
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Test a Lambda function
      tags:
      - Lambda
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Login
      tags:
      - IAM
  /api/v1/organizations:
    get:
      consumes:
      - application/json
      description: Returns the organization name and all users (name, role ID) in
        it
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetOrganizationsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get the user's organization and its users
      tags:
      - IAM
    post:
      consumes:
      - application/json
      description: Create a new organization that can contain multiple accounts
      parameters:
      - description: Organization information
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateOrganizationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CreateOrganizationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new organization
      tags:
      - IAM
  /api/v1/organizations/{org_id}/users:
    post:
      consumes:
      - application/json
      description: Create a user account in a specific organization with the specified
        role
      parameters:
      - description: Organization ID
        in: path
        name: org_id
        required: true
        type: string
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a user in an organization
      tags:
      - IAM
  /api/v1/roles:
    get:
      consumes:
      - application/json
      description: Returns all roles (name, permissions) for the authenticated user's
        organization
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetRolesResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all roles in the user's organization
      tags:
      - IAM
    post:
      consumes:
      - application/json
      description: 'Create a new role with specified permissions. Permissions are:
        0=Read, 1=Write, 2=Delete'
      parameters:
      - description: Role information
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CreateRoleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new role
      tags:
      - IAM
  /api/v1/roles/assign:
    post:
      consumes:
      - application/json
      description: Assign a role to a user or bot account
      parameters:
      - description: Role assignment information
        in: body
        name: assignment
        required: true
        schema:
          $ref: '#/definitions/handlers.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AssignRoleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Assign a role to an account
      tags:
      - IAM
  /api/v1/secrets:
    get:
      description: List all secrets for the authenticated user (does not return secret
        values)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SecretResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.AppError'
      security:
      - BearerAuth: []
      summary: List secrets
      tags:
      - Secrets Manager
    post:
      consumes:
      - application/json
      description: Create a new secret for the authenticated user
      parameters:
      - description: Secret details to create
        in: body
        name: secret
        required: true
        schema:
          $ref: '#/definitions/models.SecretBodyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SecretResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.AppError'
      security:
      - BearerAuth: []
      summary: Create secret
      tags:
      - Secrets Manager
  /api/v1/secrets/{id}:
    delete:
      description: Delete a secret for the authenticated user
      parameters:
      - description: Secret ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.AppError'
      security:
      - BearerAuth: []
      summary: Delete secret
      tags:
      - Secrets Manager
    get:
      description: Get a secret and its decrypted value for the authenticated user
      parameters:
      - description: Secret ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.AppError'
      security:
      - BearerAuth: []
      summary: Get secret
      tags:
      - Secrets Manager
    put:
      consumes:
      - application/json
      description: Update the value and/or metadata for a secret
      parameters:
      - description: Secret ID
        in: path
        name: id
        required: true
        type: string
      - description: Secret update
        in: body
        name: secret
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSecretBody'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.AppError'
      security:
      - BearerAuth: []
      summary: Update secret
      tags:
      - Secrets Manager
  /api/v1/token/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an expired JWT token
      parameters:
      - description: Refresh token request
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Refresh JWT token
      tags:
      - IAM
  /api/v1/token/validate:
    get:
      consumes:
      - application/json
      description: Validate a JWT token and return its claims
      parameters:
      - description: JWT token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ValidateTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Validate JWT token
      tags:
      - IAM
  /health:
    get:
      description: Get the health status of the API. This endpoint can be used by
        load balancers and monitoring systems to verify the API is running properly.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HealthCheckResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Health check
      tags:
      - health
securityDefinitions:
  BearerAuth:
    description: '"Type ''Bearer '' + your JWT token to authorize"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
